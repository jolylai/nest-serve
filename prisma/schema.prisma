generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  id        Int    @id @default(autoincrement())
  pid       Int
  name      String
  shortname String
  longitude String
  latitude  String
  level     Int
  sort      Int
  status    Int    @default(1) @db.TinyInt()

  @@map("area")
}

model User {
  id       String  @id @default(cuid())
  name     String
  mobile   String  @unique
  avatar   String?
  email    String?
  gender   Int     @db.TinyInt() // 0: 未知 1: 男 2: 女
  status   Int     @db.TinyInt() // 0: 禁用 1: 启用
  password String

  // deptId Int @map("dept_id")
  address Address[]
  session Session[]
  account Account?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id           String @id @default(cuid())
  sessionToken String @unique
  os           String
  device       String
  userId       String
  user         User   @relation(fields: [userId], references: [id])

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expiresAt  DateTime

  @@unique([identifier, token])
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  name        String
  mobile      String
  provinceId  Int      @map("province_id")
  cityId      Int      @map("city_id")
  areaId      Int      @map("area_id")
  address     String
  fullAddress String   @map("full_address")
  longitude   Float
  latitude    Float
  isDefault   Int      @map("is_default") @db.TinyInt
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("address")
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("file")
}

model Goods {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("goods")
}

model Order {
  id        Int      @id @default(autoincrement())
  no        String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
}

model Department {
  id        Int     @id @default(autoincrement())
  name      String
  sort      Int     @db.TinyInt
  ancestors String?
  status    Int     @db.TinyInt

  parentId Int?         @map("parent_id")
  parent   Department?  @relation("SubDepartments", fields: [parentId], references: [id])
  children Department[] @relation("SubDepartments")

  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("department")
}

model Job {
  id        Int      @id @default(autoincrement())
  code      String
  name      String
  order     Int
  status    Int      @db.TinyInt
  remark    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("job")
}

model Menu {
  id       Int    @id @default(autoincrement())
  parentId Int?
  type     Int    @db.TinyInt
  name     String
  order    Int
  path     String

  icon        String?
  isLink      Int?     @map("is_link") @db.TinyInt
  isCache     Int?     @map("is_cache") @db.TinyInt
  visible     Int?     @db.TinyInt
  status      Int?     @db.TinyInt
  query       String?
  permissions String?
  ancestors   String
  isLeaf      Boolean
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("menu")
}

model Role {
  id       Int    @id @default(autoincrement())
  type     String
  icon     String
  name     String
  order    Int
  path     String
  parentId Int

  isLink  Int @map("is_link") @db.TinyInt
  visible Int @db.TinyInt
  status  Int @db.TinyInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("role")
}

model Dictionary {
  id     Int    @id @default(autoincrement())
  code   String @unique
  name   String
  status Int    @default(1) @db.TinyInt
  remark String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("dictionary")
}

model DictionaryItem {
  id     Int    @id @default(autoincrement())
  labal  String
  value  String
  order  Int
  status Int    @db.TinyInt
  remark String

  code String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("dictionary_item")
}
